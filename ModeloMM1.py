# -*- coding: utf-8 -*-
"""PráticaMS1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/179yCGd_BMLGcl5bIdDnSl2CHnpLNgGqF
"""

import numpy as np
import pandas as pd
import os
import time

def Inicializar(df):
  evento = 'Inicio'
  cliente = '-'

  relogio = 0

  horario_saida = float('INF')
  horario_chegada = 0

  estado_servidor = 0 # 0 significa ocioso, 1 significa ocupado
  tamanho_fila = 0

  df[0] = [evento,cliente,relogio,estado_servidor,tamanho_fila,horario_chegada,horario_saida]
  #df = np.vstack([df,row])
  return df

#EVENTO | CLIENTE | RELOGIO| ESTADO_SERVIDOR| TAMANHO_FILA| HORARIO_CHEGADA| HORARIO_SAIDA|
def evento_chegada(df,count,next_client,max_fila):
  evento = 'Chegada'
  cliente = next_client
  relogio = df[count][5]#Horario Chegada
  estado_servidor = df[count][3]
  tamanho_fila = df[count][4]
  horario_saida = df[count][6]

  #if tamanho_fila >= max_fila:
    #return

  if int(df[count][3]) == 0: #Estado Servidor
    estado_servidor = 1

    if var_ts == 1:
      tempo_servico = ts
    else:
      tempo_servico = generate(frequencies_ts)

    horario_saida = float(relogio) + float(tempo_servico)
  else:
    tamanho_fila = int(tamanho_fila) + 1
  
  
  if var_tec == 1:
      tempo_chegada = tec
  else:
      tempo_chegada = generate(frequencies_tec)

  horario_chegada = float(relogio) + float(tempo_chegada)


  row = [evento,cliente,relogio,estado_servidor,tamanho_fila,horario_chegada,horario_saida]
  df = np.vstack([df,row])
  next_client = next_client+1

  return df,next_client

#EVENTO | CLIENTE | RELOGIO| ESTADO_SERVIDOR| TAMANHO_FILA| HORARIO_CHEGADA| HORARIO_SAIDA|
def evento_saida(df,count,last_client):
  evento = 'Saida'
  cliente = last_client # arrumar aqui!!!!!!!!!!!!!!!!
  relogio = df[count][6]
  estado_servidor = df[count][3]
  tamanho_fila = df[count][4]
  horario_chegada = df[count][5]
  horario_saida = df[count][6]


  if int(tamanho_fila) > 0:
    tamanho_fila = int(tamanho_fila) -1
    
    if var_ts == 1:
      tempo_servico = ts
    else:
      tempo_servico = generate(frequencies_ts)

    horario_saida = float(relogio) + float(tempo_servico)

  else:
    estado_servidor = 0
    horario_saida = float('INF')

  row = [evento,cliente,relogio,estado_servidor,tamanho_fila,horario_chegada,horario_saida]
  df = np.vstack([df,row])
  last_client = last_client+1

  return df,last_client

def create_distrib():

  frequencies = np.zeros((1,2),dtype = np.float64)

  i = 0
  last_freq = 0

  while last_freq < 1 :
    a = int(input('Insira o Valor Inferior do Intervalo: '))
    b = int(input('Insira o Valor Superior do Intervalo: '))
    f = float(input('Insira a Frequencia de Ocorrência do Intervalo: '))
    print('--------------------------------------------------------------')
    print('                                                              ')

    last_freq = last_freq + f
    last_freq = round(last_freq,3)
    row = [(a+b)/2,last_freq]
    frequencies = np.vstack([frequencies,row])
    
  if last_freq > 1:
    return None
    
  frequencies = np.delete(frequencies,0,0)

  return frequencies

def exponencial(l):
  U = np.random.uniform()
  X=(-1/l)*log(1-U)
  return X

def normal (a,b):
  U = np.random.uniform()
  X = a + (b,a)*U
  return X

def generate(frequencies):

  value = np.random.random()
  for i in range(len(frequencies)):
    if value < frequencies[i][1]:
      value = frequencies[i][0]
      break
  
  return value

def num_med_fila(df):# OK
  somatorio = 0
  total = float(df[-1][2])

  for i in range(len(df)):
    if float(df[i][5]) < float(df[i][2]):
    	if float(df[i][6]) != float('INF'):
      		tempo = float(df[i][6])-float(df[i][2])
    else:
      if float(df[i][5]) < float(df[i][6]):
        tempo = float(df[i][5]) - float(df[i][2])
  
      else:
        tempo = float(df[i][6]) - float(df[i][2])

    tamanho_fila = int(df[i][4])
    somatorio = somatorio+tempo*tamanho_fila
    

  if total == 0:
    return '-'

  media = somatorio/total
  return media

def taxa_media_ocup_servidores(df):
  somatorio = 0
  total = float(df[-1][2])
  
  for i in range(len(df)):
    if float(df[i][5]) < float(df[i][2]):
    	if float(df[i][6]) != float('INF'):
      		tempo = float(df[i][6])-float(df[i][2])
    else:
      if float(df[i][5]) < float(df[i][6]):
        tempo = float(df[i][5]) - float(df[i][2])
  
      else:
        tempo = float(df[i][6]) - float(df[i][2])

    somatorio = somatorio + tempo*int(df[i][3])
  
  if total == 0:
    return '-'

  media = somatorio/total
  return media

def tempo_medio_sistema(df):

  aux_chegada = []
  aux_saida = []
  total = int(df[-1][1])
  somatorio = 0

  for i in range(len(df)):
    if df[i][0] == 'Chegada':
      aux_chegada.append(df[i][2])


  for i in range(len(df)):
    if df[i][0] == 'Saida':
      aux_saida.append(df[i][2])

  if len(aux_chegada) != len(aux_saida):
    print('Error')
    return None

  for i in range(len(aux_chegada)):
    somatorio = somatorio + float(aux_saida[i]) - float(aux_chegada[i])
  
  if total == 0:
    return '-'


  media = somatorio/total

  return media

def tempo_medio_fila(df):
  aux_chegada = []
  aux_saida = []
  total = int(df[-1][1])
  somatorio = 0

  for i in range(len(df)):
    if df[i][0] == 'Chegada':
      aux_chegada.append(df[i][2])


  for i in range(len(df)):
    if df[i][0] == 'Saida':
      aux_saida.append(df[i][2])

  for i in range(len(aux_chegada)-1):
    somatorio = somatorio + float(aux_saida[i])-float(aux_chegada[i+1])

  if total == 0:
    return '-'

  media = somatorio/total

  return media

def mostrar_estatisticas(df):

  print('Numero medio de entidades na fila: ',num_med_fila(df))
  print('Taxa media de ocupaçãão do servidor: ',taxa_media_ocup_servidores(df))
  print('Tempo medio despendido no sistema: ',tempo_medio_sistema(df))
  print('Tempo medio despendido na fila: ',tempo_medio_fila(df))


#-----------------------------------------------------MENU------------------------------------------------------------------------------------------
#Declaração Variáveis Básicas
columns = ['|Evento |', 'Cliente |','Relogio |','Estado Servidor |','Tamanho Fila |','Horario Chegada |','Horario Saida |'] 
df = np.zeros((1,7), dtype = object)
print("Bem Vindo!")
print('Por favor Insira os Dados Referentes a Maneira que a Simulação Ocorrerá:')
print(' ')
print('--------------------------------------------------------------')


#----------------------------------------------------Tempo Entre Chegadas---------------------------------------------------------------------------
print('Tempo Entre Chegadas: ')
print('1 - Normal')
print('2 - Exponencial')
var_tec = int(input())

if var_tec == 1:
  tec = normal(0,20)
else:
  if var_tec ==2:
    l = 10
    frequencies_tec = exponencial(l)
  try:
    if frequencies_tec == None:
      print('ERRO Soma das Frequencias Maior que 1')
  except:
    pass
#--------------------------------------------------------------Tempo Servico------------------------------------------------------------------------
print('--------------------------------------------------------------')
print('Tempo Servico: ')
print('1 - Discreto')
print('2 - Aleatório')


var_ts = int(input())

if var_ts == 1:
  ts = input('Insira o Tempo de Serviço: ' )
else:
  if var_ts ==2:
    frequencies_ts = create_distrib()
  try:
    if frequencies_ts == None:
      print('ERRO Soma das Frequencias Maior que 1')
  except:
    pass
#---------------------------------------------------------------Tamanho Fila ---------------------------------------------------------------------
print('--------------------------------------------------------------')
print('Tamanho Maximo da Fila: ')
print('1 - Infinito')
print('2 - Finito')

var_fila = int(input())

if var_fila == 1:
  max_fila = float('INF')
else:
  if var_fila == 2:
    max_fila = float(input('Insira o Tamanho Maximo da Fila: '))

#----------------------------------------------------------------Maximo Iterações-------------------------------------------------------------------
print('--------------------------------------------------------------')
print('Insira quantas iterações devem ser realizadas: ')
iterations = input()
print(' ')

#----------------------------------------------------------------Modo de execução-------------------------------------------------------------------
print('--------------------------------------------------------------')
print('Insira o modo de execução: ')
print('1 - Direto')
print('2 - Lento')
mode = input()

last_client = 1
next_client = 1
count = 0
df = Inicializar(df)

while count<int(iterations):

  if float(df[count][5]) < float(df[count][6]) and int(df[count][4]) < max_fila:
    if int(mode) == 2:
    	tempo_espera = float(df[count][5]) - float(df[count][2])
    	time.sleep(tempo_espera)
    	
    df,next_client = evento_chegada(df,count,next_client,max_fila)

  else:
    if int(mode) == 2:
    	tempo_espera = float(df[count][6]) - float(df[count][2])
    	time.sleep(tempo_espera)
    	
    df,last_client = evento_saida(df,count,last_client)
    
  out_put = pd.DataFrame(data=df, columns= columns)
  os.system('clear')
  print(out_put)

  count = count+1

restantes_fila = int(df[-1][4])

while float(df[-1][6]) != float('INF') :
  
  df,last_client = evento_saida(df,count,last_client)
  count = count+1
  restantes_fila = restantes_fila - 1
  
  out_put = pd.DataFrame(data=df, columns= columns)
  os.system('clear')
  print(out_put)

  if int(mode) == 2 and float(df[-1][6]) != float('INF'):
  	tempo_espera = float(df[-1][6]) - float(df[-1][2])  
  	time.sleep(tempo_espera)

print('--------------------------------------------------------------')
mostrar_estatisticas(df)
print('--------------------------------------------------------------')

#EVENTO | CLIENTE | RELOGIO| ESTADO_SERVIDOR| TAMANHO_FILA| HORARIO_CHEGADA| HORARIO_SAIDA|
